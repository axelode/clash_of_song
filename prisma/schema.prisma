// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  email      String? @unique
  username   String?
  googleId   String  @unique
  avatar     String?
  diamondQty Int?    @default(0)

  matchResult MatchResult[]
  invoice     Invoice[]
  userAvatar  UserAvatar[]
  userAnswer  UserAnswer[]
  diamond     Diamond[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("user")
}

model Diamond {
  id    String @id @default(uuid())
  qty   Int
  price String

  invoice Invoice[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  @@map("diamond")
}

model Quiz {
  id       String   @id @default(uuid())
  score    Int
  question String
  timer    Int

  answers    Answer[]
  userAnswer UserAnswer[]

  createdAt DateTime @default(now())

  @@map("quiz")
}

model Answer {
  id      String  @id @default(uuid())
  content String
  isCorrect Boolean

  userAnswer UserAnswer[]

  Quiz   Quiz?   @relation(fields: [quizId], references: [id])
  quizId String?

  createdAt DateTime @default(now())

  @@map("choices")
}

model UserAnswer {
  id         String  @id @default(uuid())
  content String
  isCorrect  Boolean

  createdAt DateTime @default(now())

  Answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String?
  Quiz     Quiz?   @relation(fields: [quizId], references: [id])
  quizId   String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?

  @@map("user_answer")
}

model Match {
  id        String @id @default(uuid())
  status    String
  startTime String
  endTime   String

  matchResults MatchResult[]
  MatchMaking  MatchMaking[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("matches")
}

model MatchMaking {
  id       String @id @default(uuid())
  matchId  String
  match    Match  @relation(fields: [matchId], references: [id])
  playerId String
  result   String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("match_making")
}

model MatchResult {
  id      String @id @default(uuid())
  score   Int
  ranking Int

  matchId String
  userId  String
  match   Match  @relation(fields: [matchId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("match_results")
}

model Avatar {
  id    String @id @default(uuid())
  image String

  userAvatar UserAvatar[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  @@map("avatar")
}

model UserAvatar {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  Avatar   Avatar? @relation(fields: [avatarId], references: [id])
  avatarId String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?

  @@map("user_avatar")
}

model Invoice {
  id     String @id @default(uuid())
  qty    Int
  status String
  amount String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Diamond   Diamond? @relation(fields: [diamondId], references: [id])
  diamondId String?

  @@map("invoice")
}
